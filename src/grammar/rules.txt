PROGRAMME : DIRECTIVE_PRAGMA* DEFINITION_CONTRAT EOF;

DIRECTIVE_PRAGMA : PRAGMA_TOKEN CASHSCRIPT_TOKEN VALEUR_PRAGMA POINT_VIRGULE_TOKEN;

VALEUR_PRAGMA : CONTRAINTE_VERSION [CONTRAINTE_VERSION | eps];

CONTRAINTE_VERSION : [OPERATEUR_VERSION | eps] VERSION_LITTERALE_TOKEN;

OPERATEUR_VERSION : OPERATEUR_BINAIRE_XOR_TOKEN | OPERATEUR_BINAIRE_NON_TOKEN | OPERATEUR_SUPEG_TOKEN | OPERATEUR_SUP_TOKEN | OPERATEUR_INF_TOKEN | OPERATEUR_INFEG_TOKEN | OPERATEUR_EG_TOKEN;

DEFINITION_CONTRAT : CONTRAT_TOKEN IDENTIFIANT_TOKEN LISTE_PARAMETRE ACCOLADE_O_TOKEN {DEFINITION_FONCTION} ACCOLADE_F_TOKEN;

DEFINITION_FONCTION : FONCTION_TOKEN IDENTIFIANT_TOKEN LISTE_PARAMETRE ACCOLADE_O_TOKEN {DECLARATION} ACCOLADE_F_TOKEN;

LISTE_PARAMETRE : PARENTHESE_O_TOKEN [(PARAMETRE (VIRGULE_TOKEN PARAMETRE)* [VIRGULE_TOKEN | eps])| eps] PARENTHESE_F_TOKEN;

PARAMETRE : typeName IDENTIFIANT_TOKEN;

block : ACCOLADE_O_TOKEN DECLARATION* ACCOLADE_F_TOKEN | DECLARATION;

DECLARATION : variableDefinition| assignStatement| timeOpStatement| requireStatement| ifStatement;

variableDefinition : typeName IDENTIFIANT_TOKEN OPERATEUR_EG_TOKEN expression POINT_VIRGULE_TOKEN;

assignStatement : IDENTIFIANT_TOKEN OPERATEUR_EG_TOKEN expression POINT_VIRGULE_TOKEN;

timeOpStatement : REQUIRE_TOKEN PARENTHESE_O_TOKEN TX_VAR_TOKEN OPERATEUR_SUPEG_TOKEN expression PARENTHESE_F_TOKEN POINT_VIRGULE_TOKEN;

requireStatement : REQUIRE_TOKEN PARENTHESE_O_TOKEN expression PARENTHESE_F_TOKEN POINT_VIRGULE_TOKEN;

ifStatement : SI_TOKEN PARENTHESE_O_TOKEN expression PARENTHESE_F_TOKEN block [(SINON_TOKEN block)| eps];

functionCall : IDENTIFIANT_TOKEN expressionList 

expressionList : PARENTHESE_O_TOKEN [(expression (VIRGULE_TOKEN expression)* [VIRGULE_TOKEN| eps])| eps] PARENTHESE_F_TOKEN;

expression : PARENTHESE_O_TOKEN expression PARENTHESE_F_TOKEN 
    | typeName PARENTHESE_O_TOKEN expression [(VIRGULE_TOKEN expression)| eps] [VIRGULE_TOKEN| eps] PARENTHESE_F_TOKEN 
    | functionCall 
    | NOUVEAU_TOKEN IDENTIFIANT_TOKEN expressionList 
    | expression CROCHET_O_TOKEN NOMBRE_LITTERAL_TOKEN CROCHET_F_TOKEN 
    | expression (INVERSER_TOKEN | TAILLE_TOKEN) 
    | (OPERATEUR_NON_TOKEN | OPERATEUR_MOINS_TOKEN) expression 
    | expression SPLIT_TOKEN PARENTHESE_O_TOKEN expression PARENTHESE_F_TOKEN 
    | expression ( OPERATEUR_FOIS_TOKEN | OPERATEUR_DIVISER_TOKEN | OPERATEUR_MODULO_TOKEN) expression 
    | expression (OPERATEUR_PLUS_TOKEN | OPERATEUR_MOINS_TOKEN) expression 
    | expression (OPERATEUR_INF_TOKEN | OPERATEUR_INFEG_TOKEN | OPERATEUR_SUP_TOKEN | OPERATEUR_SUPEG_TOKEN) expression 
    | expression (OPERATEUR_EGAL_TOKEN | OPERATEUR_DIFFERENT_TOKEN) expression 
    | expression OPERATEUR_BINAIRE_ET_TOKEN expression 
    | expression OPERATEUR_BINAIRE_XOR_TOKEN expression 
    | expression OPERATEUR_BINAIRE_OU_TOKEN expression 
    | expression OPERATEUR_ET_TOKEN expression 
    | expression OPERATEUR_OU_TOKEN expression 
    | CROCHET_O_TOKEN [(expression (VIRGULE_TOKEN expression)* [VIRGULE_TOKEN | eps])| eps] CROCHET_F_TOKEN 
    | CHAMP_AVANT_IMAGE_TOKEN 
    | IDENTIFIANT_TOKEN 
    | literal 

literal : BOOLEAN_LITTERAL_TOKEN
    | numberLiteral
    | STRING_LITTERAL_TOKEN
    | DateLiteral
    | HEX_LITTERAL_TOKEN;

numberLiteral : NOMBRE_LITTERAL_TOKEN [UNITE_TOKEN| eps];

typeName : TYPE_ENTIER_TOKEN | TYPE_BOOLEAN_TOKEN | TYPE_STRING_TOKEN | TYPE_CLE_PUBLIQUE_TOKEN | TYPE_SIGNATURE_TOKEN | TYPE_SIGNATURE_DONNEE_TOKEN | Bytes;

Bytes : BYTES_TOKEN [[[1-9] [0-9]*] | eps];


DateLiteral : 'date(' STRING_LITTERAL_TOKEN PARENTHESE_F_TOKEN;

COMMENT : CO_TOKEN .* CF_TOKEN ;

LINE_COMMENT : COMMENTAIRE_LIGNE_TOKEN ~[\r\n]* ;
